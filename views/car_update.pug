extends layout 
block scripts 
    script(src="/javascripts/layoutSearch.js" defer='true')
    script(src="/javascripts/layoutModes.js" defer='true')
    script(src="/javascripts/layoutMenuButton.js" defer='true')
    script(src="/javascripts/carUpdateSwitchHandler.js" defer='true')
block content
    h1 #{title}
    p #{instructions}
    form(action="" id='formUpdateCar') 
        fieldset 
            legend Vehicle Specifics:
            .form-content-text-new
                label(for='updatePrice') Price (USD): 
                input(type='text' id='updatePrice')
                label(for='updateMileage' class='mileage' class='imperial') Mileage: 
                input(type='number' id='updateMileage' class='mileage' class='imperial')
                p(class='carUpdateSwitch' class='mileage' class='imperial') Switch to metric
                label(for='updateKilometers' class='mileage' class='metric' class='invisible') Kilometers: 
                input(type='number' id='updateKilometers' class='mileage' class='metric' class='invisible') 
                p(class='carUpdateSwitch' id='toImperial' class='mileage' class='metric' class='invisible') Switch to imperial
                label(for='updateStatus') Status: 
                select(id='updateStatus')
                    option(value='Sold') Sold 
                    option(value='Available') Available
                label(for='updateColor') Color: 
                select(id='updateColor')
                    option(value='Black', selected=(color == "Black" ? 'selected' : false)) Black
                    option(value='Blue', selected=(color == "Blue" ? 'selected' : false)) Blue
                    option(value='Brown', selected=(color == "Brown" ? 'selected' : false)) Brown
                    option(value='Grey', selected=(color == "Grey" ? 'selected' : false)) Grey
                    option(value='Green', selected=(color == "Green" ? 'selected' : false)) Green
                    option(value='Red', selected=(color == "Red" ? 'selected' : false)) Red
                    option(value='Silver', selected=(color == "Silver" ? 'selected' : false)) Silver
                    option(value='White', selected=(color == "White" ? 'selected' : false)) White
                    option(value='Yellow', selected=(color == "Yellow" ? 'selected' : false)) Yellow
                    option(value='Other', selected=(color == "Other" ? 'selected' : false)) Other
                label(for='updateCountry') Country: 
                select(id='updateCountry', name='carCountry')
                    for country in countries 
                        option(value=`${country}`) #{country}
                label(for='updateDescription') Description
                input(id='updateDescription' type='text')
        fieldset 
            legend Contact Information:
            .form-content-text-new
                label(for='updateEmail') Email: 
                input(id='updateEmail' type='text')
                label(for='updatePhone') Phone: 
                input(id='updatePhone' type='string')
        fieldset 
            legend Vehicle Technical Specs:
            .form-content-text-new
                label(for='updateBody') Body:
                input(id='updateBody' type='text')
                label(for='updatePosition') Engine position: 
                select(id='updatePosition')         
                    option(value='Front') Front
                    option(value='Center') Center
                    option(value='Rear') Rear
                label(for='updateDisplacement') Displacement (CC):
                input(id='updateDisplacement' type='number')
                label(for='updateCylinders') Cylinders: 
                input(id='updateCylinders' type='number')
                label(for='updateTorque') Torque (Nm):
                input(id='updateTorque' type='number')
                label(for='updatePower') Power (hp):
                input(id='updatePower' type='number')
                label(for='updateCompression') Compression: 
                input(id='updateCompression' type='text')
                label(for='updateDrive') Drive: 
                input(id='updateDrive' type='string')
                label(for='updateTransmission') Transmission: 
                input(id='updateTransmission' type='text')
                label(for='updateWeight' class='weight' class='imperial') Weight (lbs): 
                input(id='updateWeight' type='number' class='weight' class='imperial')
                p(class='carUpdateSwitch' class='weight' class='imperial') Switch to metric
                label(for='updateWeight' class='weight' class='metric') Weight (kg): 
                input(id='updateWeight' type='number' class='weight' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='weight' class='metric') Switch to imperial
                label(for='updateFuel') Fuel type: 
                input(id='updateFuel' type='text')
                label(for='updateEfficiencyHighway' class='efficiencyHighway' class='imperial') Highway efficiency (mpg): 
                input(id='updateEfficiencyHighway' type='text' class='efficiencyHighway' class='imperial')
                p(class='carUpdateSwitch' class='efficiencyHighway' class='imperial') Switch to metric
                label(for='updateEfficiencyMixed' class='efficiencyMixed' class='imperial') Mixed efficiency (mpg): 
                input(id='updateEfficiencyMixed' type='text' class='efficiencyMixed' class='imperial')
                p(class='carUpdateSwitch' class='efficiencyMixed' class='imperial') Switch to metric
                label(for='updateEfficiencyCity' class='efficiencyCity' class='imperial') City efficiency (mpg): 
                input(id='updateEfficiencyCity' type='text' class='efficiencyCity' class='imperial')
                p(class='carUpdateSwitch' class='efficiencyCity' class='imperial') Switch to metric
                label(for='updateEfficiencyHighway' class='efficiencyHighway' class='metric') Highway efficiency (kpg): 
                input(id='updateEfficiencyHighway' type='text' class='efficiencyHighway' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='efficiencyHighway' class='metric') Switch to imperial
                label(for='updateEfficiencyMixed' class='efficiencyMixed' class='metric') Mixed efficiency (kpg): 
                input(id='updateEfficiencyMixed' type='text' class='efficiencyMixed' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='efficiencyMixed' class='metric') Switch to imperial
                label(for='updateEfficiencyCity' class='efficiencyCity' class='metric') City efficiency (kpg): 
                input(id='updateEfficiencyCity' type='text' class='efficiencyCity' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='efficiencyCity' class='metric') Switch to imperial
                label(for='updateMaxSpeed' class='speed' class='imperial') Max speed (mph):
                input(id='updateMaxSpeed' type='number' class='speed' class='imperial')
                p(class='carUpdateSwitch' class='speed' class='imperial') Switch to metric
                label(for='updateMaxSpeed' class='speed' class='metric') Max speed (km/h):
                input(id='updateMaxSpeed' type='number' class='speed' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='speed' class='metric') Switch to imperial
                label(for='updateAcceleration') Acceleration (seconds):
                input(id='updateAcceleration' type='text')
                p Time it takes to reach 60 mph (100 km/h)
                label(for='updateLength' class='length' class='imperial') Length (inches):
                input(id='updateLength' type='text' class='length' class='imperial')
                p(class='carUpdateSwitch' class='length' class='imperial') Switch to metric
                label(for='updateWidth' class='width' class='imperial') Width (inches):
                input(id='updateWidth' type='text' class='width' class='imperial')
                p(class='carUpdateSwitch' class='width' class='imperial') Switch to metric
                label(for='updateHeight' class='height' class='imperial') Height (inches):
                input(id='updateHeight' type='text' class='height' class='imperial')
                p(class='carUpdateSwitch' class='height' class='imperial') Switch to metric
                label(for='updateLength' class='length' class='metric') Length (m):
                input(id='updateLength' type='text' class='length' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='length' class='metric') Switch to imperial
                label(for='updateWidth' class='width' class='metric') Width (m):
                input(id='updateWidth' type='text' class='width' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='width' class='metric') Switch to imperial
                label(for='updateHeight' class='height' class='metric') Height (m):
                input(id='updateHeight' type='text' class='height' class='metric')
                p(class='carUpdateSwitch' id='toImperial' class='height' class='metric') Switch to imperial

